#!/bin/bash
# Dennis Kruemmel, 2018

path="/Library/Application Support/Scripts"
[[ -d "${path}" ]] || mkdir -p "${path}"

identifier="com.mycompany"

echo "

" | base64 -D -o "${path}/magic_installer.sh"

appname="${4}"

chown -R root:admin "${path}/magic_installer.sh"
chmod +x "${path}/magic_installer.sh"

launchctl list ${identifier}.magic_installer_${appname} > /dev/null 2>&1
launchctlError=$?
if [[ "${launchctlError}" -eq 0 ]]; then
    rm -f "/Library/LaunchDaemons/${identifier}.magic_installer_${appname}.plist"
    launchctl remove ${identifier}.magic_installer_${appname}
fi

cat <<EOF > "/Library/LaunchDaemons/${identifier}.magic_installer_${appname}.plist"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Label</key>
	<string>${identifier}.magic_installer_${appname}</string>
	<key>RunAtLoad</key>
	<true/>
	<key>ProgramArguments</key>
	<array>
		<string>/bin/bash</string>
		<string>${path}/magic_installer.sh</string>
		<string>${1}</string>
		<string>${2}</string>
		<string>${3}</string>
		<string>${4}</string>
		<string>${5}</string>
		<string>${6}</string>
		<string>${7}</string>
		<string>${8}</string>
		<string>${9}</string>
		<string>${10}</string>
		<string>${11}</string>
	</array>
    <key>StartInterval</key>
    <integer>10</integer>
</dict>
</plist>
EOF

chown -R root:admin "/Library/LaunchDaemons/${identifier}.magic_installer_${appname}.plist"
chmod +x "/Library/LaunchDaemons/${identifier}.magic_installer_${appname}.plist"

launchctl load -w "/Library/LaunchDaemons/${identifier}.magic_installer_${appname}.plist"
